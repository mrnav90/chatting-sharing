//
// Copyright (C) 2015 Hype Labs - All Rights Reserved
//
// NOTICE: All information contained herein is, and remains the property of
// Hype Labs. The intellectual and technical concepts contained herein are
// proprietary to Hype Labs and may be covered by U.S. and Foreign Patents,
// patents in process, and are protected by trade secret and copyright law.
// Dissemination of this information or reproduction of this material is
// strictly forbidden unless prior written permission is obtained from
// Hype Labs.
//

#import <Foundation/Foundation.h>

/**
 * @abstract Hype network instance.
 * @discussion Instances map to devices participating on the network. 
 * Instances are advertised on the network and, when found, a notification
 * is issued indicating that the instance is available for communication
 * purposes. Usually, there's no need to instantiate objects of this type
 * at all, as the framework handles that automatically. Hype uses 96 bit
 * identifiers (which added with the realm adds up to 128 bits). 64 of 
 * those, 96 bits can be used for a custom identifier, which is called
 * the vendor identifier. Vendor identifiers can be set when starting 
 * Hype's services with HYPOptionIdentifierKey, and are queried back
 * using -vendorIdentifier on each instance. This should be useful to
 * help map instances with some useful entity, such as users. The
 * -identifier property returns the instance's full identifier, including
 * the bytes generated by the SDK.
 */
@interface HYPInstance : NSObject

/**
 * @abstract The instance's realm data.
 * @discussion This property indicates the realm the instance is participating
 * in. This realm should always correspond to the app's realm, as the framework
 * handles devices from different realms transparently and never propagates them
 * to the app.
 */
@property (atomic, readonly) NSData * realm;

/**
 * @abstract The instance's realm string identifier.
 * @discussion This property yields the instance's realm using an hexadecimal
 * encoding.
 */
@property (atomic, copy) NSString * realmStringIdentifier;

/**
 * @abstract Instance identifier.
 * @discussion This property yields an identifier that is unique for each
 * instance on the network.
 */
@property (atomic, readonly) NSData * identifier;

/**
 * @abstract The instance's announcement.
 * @discussion Announcements circulate on the network to help the app identify
 * participating devices. This is similar to a vendorIdentifier, and it can be
 * considered as an extra space for identification purposes. The SDK optimizes
 * the flooding of announcements on the network by caching it on router devices.
 */
@property (atomic, readonly) NSData * announcement;

/**
 * @abstract Instance string identifier.
 * @discussion This property yields the instance's identifier in string form.
 * The string is the data object written using hexadecimal notation.
 */
@property (atomic, copy) NSString * stringIdentifier;

/**
 * @abstract Vendor identifier.
 * @discussion This property yields an identifier that was given by the vendor
 * of the mapped device.
 */
@property (atomic, copy) NSData * vendorIdentifier;

/**
 * @abstract Vendro string identifier.
 * @discussion This property yields the vendor's identifier in string form.
 * The string is the data object written using hexadecimal notation.
 */
@property (atomic, copy) NSString * vendorStringIdentifier;

/**
 * @abstract Initializer.
 * @discussion Initializes an instance object with a given identifier and 
 * announcement.
 * @param identifier Instance identifier.
 * @param announcement The instance's announcement.
 * @returns The initialized instance.
 */
- (instancetype)initWithIdentifier:(NSData *)identifier
                      announcement:(NSData *) announcement;

@end
